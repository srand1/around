{"version":3,"sources":["AsyncList.js","reuse/uncat.js","Root.js","reportWebVitals.js","index.js"],"names":["AsyncList","props","jobs","map","t","state","key","valueErrInMs","v","ms","Promise","okFn","errFn","setTimeout","Math","random","UnusedName","useState","ordered","byKey","jobsView","setJobs","_track","p","tag","s","e0","e1","Date","toISOString","then","e","hookedPromise","jobsPrev","length","msgsView","setMsgs","clicked","a","msgsPrev","onClick","join","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOASeA,EATG,SAAAC,GAAK,OACtB,6BACEA,EAAMC,KAAKC,KAAI,SAAAC,GAAC,OAChB,+BACEA,EAAEC,MAAM,GADV,MACiBD,EAAEE,MADVF,EAAEE,WCARC,EAAe,SAACC,EAAGC,GAAJ,OAAW,IAAIC,SAAQ,SAACC,EAAMC,GAClDC,YAAW,WACNC,KAAKC,SAAW,GACnBJ,EAAKH,GAELI,EAAM,KAAKJ,KAEVC,OCuCWO,EA7CI,WAClB,MAA4BC,mBAAS,CACpCC,QAAS,GACTC,MAAO,KAFR,mBAAOC,EAAP,KAAiBC,EAAjB,KAIMC,EAAS,SAACC,EAAGC,GAAJ,ODIM,SAACD,EAAGC,EAAKC,EAAGC,EAAIC,GACrC,IAAMrB,GAAO,IAAIsB,MAAQC,cAAgB,MAAQL,EAEjD,OADAC,EAAEnB,GACKiB,EAAEO,MACR,SAAAtB,GAEC,OADAkB,EAAGpB,GACIE,KAER,SAAAuB,GAEC,MADAJ,EAAGrB,GACGyB,KCdmBC,CAC1BT,EAAGC,GACH,SAAAlB,GAAG,OAAIe,GAAQ,SAAAY,GAMd,MAAO,CAACd,MALG,2BAAOc,EAASd,OAAhB,kBAAwBb,EAAM2B,EAASf,QAAQgB,SAK3ChB,QAJF,sBAAOe,EAASf,SAAhB,CAAyB,CACrCZ,MACAD,MAAO,oBAIT,SAAAC,GAAG,OAAIe,GAAQ,SAAAY,GACd,IAAMf,EAAO,YAAOe,EAASf,SAK7B,OAJAA,EAAQe,EAASd,MAAMb,IAAQ,CAC9BA,MACAD,MAAO,QAED,2BAAI4B,GAAX,IAAqBf,kBAEtB,SAAAZ,GAAG,OAAIe,GAAQ,SAAAY,GACd,IAAMf,EAAO,YAAOe,EAASf,SAK7B,OAJAA,EAAQe,EAASd,MAAMb,IAAQ,CAC9BA,MACAD,MAAO,OAED,2BAAI4B,GAAX,IAAqBf,mBAGvB,EAA4BD,mBAAS,IAArC,mBAAOkB,EAAP,KAAiBC,EAAjB,KAEMC,EAAO,uCAAG,4BAAAC,EAAA,sEACChB,EAAOf,EAAa,IAAK,KAAO,gBADjC,OACTC,EADS,OAEf4B,GAAQ,SAAAG,GAAQ,4BAAQA,GAAR,CAAkB/B,EAAE+B,EAASL,YAF9B,2CAAH,qDAKb,OAAQ,gCACP,cAAC,EAAD,CAAWhC,KAAMkB,EAASF,UAC1B,wBAAQsB,QAASH,EAAjB,eACA,4BAAIF,EAASM,KAAK,aClCLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0675f288.chunk.js","sourcesContent":["const AsyncList = props => (\n\t<ul>\n\t\t{props.jobs.map(t => (\n\t\t\t<li key={t.key}>\n\t\t\t\t{t.state[0]} | {t.key}\n\t\t\t</li>\n\t\t))}\n\t</ul>\n);\nexport default AsyncList;\n","const valueInMs = (v, ms) => new Promise((okFn, errFn) => {\n\tsetTimeout(() => okFn(v), ms);\n});\nconst valueErrInMs = (v, ms) => new Promise((okFn, errFn) => {\n\tsetTimeout(() => {\n\t\tif (Math.random() < 0.5) {\n\t\t\tokFn(v);\n\t\t} else {\n\t\t\terrFn('E:'+v);\n\t\t}\n\t}, ms);\n});\nconst noop = () => {};\nconst hookedPromise = (p, tag, s, e0, e1) => {\n\tconst key = (new Date()).toISOString() + ' | ' + tag;\n\ts(key);\n\treturn p.then(\n\t\tv => {\n\t\t\te0(key);\n\t\t\treturn v;\n\t\t},\n\t\te => {\n\t\t\te1(key);\n\t\t\tthrow e;\n\t\t},\n\t);\n};\n\nexport {\n\tvalueInMs,\n\tvalueErrInMs,\n\tnoop,\n\thookedPromise,\n};\n","import {useState} from 'react';\nimport AsyncList from './AsyncList';\nimport {valueErrInMs, hookedPromise} from './reuse/uncat';\n\nconst UnusedName = () => {\n\tconst [jobsView, setJobs] = useState({\n\t\tordered: [],\n\t\tbyKey: {},\n\t});\n\tconst _track = (p, tag) => hookedPromise(\n\t\tp, tag,\n\t\tkey => setJobs(jobsPrev => {\n\t\t\tconst byKey = {...jobsPrev.byKey, [key]: jobsPrev.ordered.length};\n\t\t\tconst ordered = [...jobsPrev.ordered, {\n\t\t\t\tkey,\n\t\t\t\tstate: 'Pending',\n\t\t\t}];\n\t\t\treturn {byKey, ordered};\n\t\t}),\n\t\tkey => setJobs(jobsPrev => {\n\t\t\tconst ordered = [...jobsPrev.ordered];\n\t\t\tordered[jobsPrev.byKey[key]] = {\n\t\t\t\tkey,\n\t\t\t\tstate: 'Done',\n\t\t\t};\n\t\t\treturn {...jobsPrev, ordered};\n\t\t}),\n\t\tkey => setJobs(jobsPrev => {\n\t\t\tconst ordered = [...jobsPrev.ordered];\n\t\t\tordered[jobsPrev.byKey[key]] = {\n\t\t\t\tkey,\n\t\t\t\tstate: 'Err',\n\t\t\t};\n\t\t\treturn {...jobsPrev, ordered};\n\t\t}),\n\t);\n\tconst [msgsView, setMsgs] = useState([]);\n\n\tconst clicked = async () => {\n\t\tconst v = await _track(valueErrInMs('a', 2000), 'valueErrInMs');\n\t\tsetMsgs(msgsPrev => [...msgsPrev, v+msgsPrev.length]);\n\t};\n\n\treturn (<div>\n\t\t<AsyncList jobs={jobsView.ordered} />\n\t\t<button onClick={clicked}>X</button>\n\t\t<p>{msgsView.join(' | ')}</p>\n\t</div>);\n};\nexport default UnusedName;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport C from './Root';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <C />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}