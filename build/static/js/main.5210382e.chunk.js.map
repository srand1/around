{"version":3,"sources":["AsyncList.js","reuse/uncat.js","Root.js","reportWebVitals.js","index.js"],"names":["AsyncList","props","jobs","map","t","valueInMs","v","ms","Promise","okFn","errFn","setTimeout","UnusedName","useState","setJobs","clicked","a","j","length","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNASeA,EATG,SAAAC,GAAK,OACtB,6BACEA,EAAMC,KAAKC,KAAI,SAAAC,GAAC,OAChB,6BACEA,GADOA,SCHNC,EAAY,SAACC,EAAGC,GAAJ,OAAW,IAAIC,SAAQ,SAACC,EAAMC,GAC/CC,YAAW,kBAAMF,EAAKH,KAAIC,OCiBZK,EAdI,WAClB,MAAwBC,mBAAS,IAAjC,mBAAOX,EAAP,KAAaY,EAAb,KAEMC,EAAO,uCAAG,4BAAAC,EAAA,6DACfF,GAAQ,SAAAG,GAAC,4BAAQA,GAAR,CAAWA,EAAEC,YADP,SAECb,EAAU,IAAK,KAFhB,OAETC,EAFS,OAGfQ,GAAQ,SAAAG,GAAC,4BAAQA,GAAR,CAAWX,EAAEW,EAAEC,YAHT,2CAAH,qDAMb,OAAQ,gCACP,cAAC,EAAD,CAAWhB,KAAMA,IACjB,wBAAQiB,QAASJ,EAAjB,mBCHaK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5210382e.chunk.js","sourcesContent":["const AsyncList = props => (\n\t<ul>\n\t\t{props.jobs.map(t => (\n\t\t\t<li key={t}>\n\t\t\t\t{t}\n\t\t\t</li>\n\t\t))}\n\t</ul>\n);\nexport default AsyncList;\n","const valueInMs = (v, ms) => new Promise((okFn, errFn) => {\n\tsetTimeout(() => okFn(v), ms);\n});\n\nexport {valueInMs};\n","import {useState} from 'react';\nimport AsyncList from './AsyncList';\nimport {valueInMs} from './reuse/uncat';\n\nconst UnusedName = () => {\n\tconst [jobs, setJobs] = useState([]);\n\n\tconst clicked = async () => {\n\t\tsetJobs(j => [...j, j.length]);\n\t\tconst v = await valueInMs('a', 2000);\n\t\tsetJobs(j => [...j, v+j.length]);\n\t};\n\n\treturn (<div>\n\t\t<AsyncList jobs={jobs} />\n\t\t<button onClick={clicked}>X</button>\n\t</div>);\n};\nexport default UnusedName;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport C from './Root';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <C />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}