{"version":3,"sources":["AsyncList.js","reuse/uncat.js","Root.js","reportWebVitals.js","index.js"],"names":["AsyncList","props","jobs","map","t","valueErrInMs","v","ms","Promise","okFn","errFn","setTimeout","Math","random","hookedPromise","p","s","e0","e1","then","e","UnusedName","useState","setJobs","clicked","a","j","length","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNASeA,EATG,SAAAC,GAAK,OACtB,6BACEA,EAAMC,KAAKC,KAAI,SAAAC,GAAC,OAChB,6BACEA,GADOA,SCANC,EAAe,SAACC,EAAGC,GAAJ,OAAW,IAAIC,SAAQ,SAACC,EAAMC,GAClDC,YAAW,WACNC,KAAKC,SAAW,GACnBJ,EAAKH,GAELI,EAAM,KAAKJ,KAEVC,OAGEO,EAAgB,SAACC,EAAGC,EAAGC,EAAIC,GAEhC,OADAF,IACOD,EAAEI,MACR,SAAAb,GAEC,OADAW,IACOX,KAER,SAAAc,GAEC,MADAF,IACME,MCAMC,EAlBI,WAClB,MAAwBC,mBAAS,IAAjC,mBAAOpB,EAAP,KAAaqB,EAAb,KAEMC,EAAO,uCAAG,4BAAAC,EAAA,sEACCX,EACfT,EAAa,IAAK,MAClB,kBAAMkB,GAAQ,SAAAG,GAAC,4BAAQA,GAAR,CAAW,KAAKA,EAAEC,eACjC,kBAAMJ,GAAQ,SAAAG,GAAC,4BAAQA,GAAR,CAAW,MAAMA,EAAEC,eAClC,kBAAMJ,GAAQ,SAAAG,GAAC,4BAAQA,GAAR,CAAW,MAAMA,EAAEC,eALpB,OACTrB,EADS,OAOfiB,GAAQ,SAAAG,GAAC,4BAAQA,GAAR,CAAWpB,EAAEoB,EAAEC,YAPT,2CAAH,qDAUb,OAAQ,gCACP,cAAC,EAAD,CAAWzB,KAAMA,IACjB,wBAAQ0B,QAASJ,EAAjB,mBCPaK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.821441a1.chunk.js","sourcesContent":["const AsyncList = props => (\n\t<ul>\n\t\t{props.jobs.map(t => (\n\t\t\t<li key={t}>\n\t\t\t\t{t}\n\t\t\t</li>\n\t\t))}\n\t</ul>\n);\nexport default AsyncList;\n","const valueInMs = (v, ms) => new Promise((okFn, errFn) => {\n\tsetTimeout(() => okFn(v), ms);\n});\nconst valueErrInMs = (v, ms) => new Promise((okFn, errFn) => {\n\tsetTimeout(() => {\n\t\tif (Math.random() < 0.5) {\n\t\t\tokFn(v);\n\t\t} else {\n\t\t\terrFn('E:'+v);\n\t\t}\n\t}, ms);\n});\nconst noop = () => {};\nconst hookedPromise = (p, s, e0, e1) => {\n\ts();\n\treturn p.then(\n\t\tv => {\n\t\t\te0();\n\t\t\treturn v;\n\t\t},\n\t\te => {\n\t\t\te1();\n\t\t\tthrow e;\n\t\t},\n\t);\n};\n\nexport {\n\tvalueInMs,\n\tvalueErrInMs,\n\tnoop,\n\thookedPromise,\n};\n","import {useState} from 'react';\nimport AsyncList from './AsyncList';\nimport {valueErrInMs, hookedPromise} from './reuse/uncat';\n\nconst UnusedName = () => {\n\tconst [jobs, setJobs] = useState([]);\n\n\tconst clicked = async () => {\n\t\tconst v = await hookedPromise(\n\t\t\tvalueErrInMs('a', 2000),\n\t\t\t() => setJobs(j => [...j, 'v|'+j.length]),\n\t\t\t() => setJobs(j => [...j, 'e0|'+j.length]),\n\t\t\t() => setJobs(j => [...j, 'e1|'+j.length]),\n\t\t);\n\t\tsetJobs(j => [...j, v+j.length]);\n\t};\n\n\treturn (<div>\n\t\t<AsyncList jobs={jobs} />\n\t\t<button onClick={clicked}>X</button>\n\t</div>);\n};\nexport default UnusedName;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport C from './Root';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <C />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}